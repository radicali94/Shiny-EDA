install.packages("rayshader")
gg = ggplot(diamonds, aes(x, depth)) +
stat_density_2d(aes(fill = stat(nlevel)),
geom = "polygon",
n = 100,bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
plot_gg(gg,multicore=TRUE,width=5,height=5,scale=250)
ggplot_potential = generate_ggplot_potential()
ggplot_objects = generate_ggplot_orbiting_objects()
plot_gg(list(ggplot_objects, ggplot_potential), height=5, width=4.5)
install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
session_info()
session_info()
install.packages("devtools")
install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
shiny::runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
library(ggplot2)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
library(ggplot2)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
library("rayshader")
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5,height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
render_snapshot(clear = TRUE)
render_snapshot(clear = TRUE)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5,height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
mtplot = ggplot(mtcars) +
geom_point(aes(x=mpg,y=disp,color=cyl)) +
scale_color_continuous(limits=c(0,8))
par(mfrow=c(1,2))
plot_gg(mtplot, width=3.5, raytrace = FALSE, preview = TRUE)
plot_gg(mtplot, width=3.5, multicore = TRUE, windowsize = c(800,800),
zoom=0.85, phi=35, theta=30, sunangle=225, soliddepth=-100)
render_snapshot(clear = TRUE)
ggplot_potential = generate_ggplot_potential()
library(ggplot2)
library("rayshader")
ggplot_potential = generate_ggplot_potential()
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 100,height = 100, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 10,height = 10, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 10,height = 10, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
render_snapshot(clear = TRUE)
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 2,height = 2, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 2,height = 2, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
render_snapshot(clear = TRUE)
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5,height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
library(ggplot2)
library("rayshader")
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5,height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
render_snapshot(clear = TRUE)
shiny::runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
#----Atelier-1----
#----Mohamed-Radhi-TOUJANI----
#-----4-DS-2----
#1
library(FactoMineR)
dacathlon <- data("decathlon")
#2
str(decathlon)
summary(decathlon)
#3
install.packages("plyr")
library(plyr)
summary(decathlon$Points)
ddply(decathlon, ~ Competition,summarize,resume=c("Min","1st Qu.","Median","Mean","3rd Qu.","Max"), score=summary(Points))
#4
install.packages("corrgram")
library(corrgram)
round(cor(decathlon[, 1:12], use="pair"),2)
corrgram(decathlon[,1:12],order = T)
#1
res.pca <- PCA(decathlon, quanti.sup = c(11:12),quali.sup = 13, scale.unit=TRUE, ncp=5)
#2
#Les variables "Rank" et "Points" sont des variables illustratives car elles représentent des données supplémentaires déjà
#données par les variables quanti détaillées pour chaque individu (athlète).
#3
dimdesc(res.pca)
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
d <- data.frame(x = rnorm(500))
library(ggplot2)
ggplot(d, aes(x)) +
geom_histogram()
ggplot(d, aes(x, fill = cut(x, 100))) +
geom_histogram()
ggplot(d, aes(x, fill = cut(x, 100))) +
geom_histogram(show.legend = FALSE)
ggplot(d, aes(x, fill = cut(x, 100))) +
geom_histogram(show.legend = FALSE) +
scale_fill_discrete(h = c(240, 10), c = 120, l = 70) +
theme_minimal() +
labs(x = "Variable X", y = "n") +
ggtitle("Histogram of X")
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
#----Atelier-1----
#----Mohamed-Radhi-TOUJANI----
#-----4-DS-2----
#1
library(FactoMineR)
dacathlon <- data("decathlon")
#2
str(decathlon)
summary(decathlon)
#3
install.packages("plyr")
library(plyr)
summary(decathlon$Points)
ddply(decathlon, ~ Competition,summarize,resume=c("Min","1st Qu.","Median","Mean","3rd Qu.","Max"), score=summary(Points))
library(corrgram)
round(cor(decathlon[, 1:12], use="pair"),2)
corrgram(decathlon[,1:12],order = T)
shiny::runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
install.packages("devtools")
library(ggplot2)
library("rayshader")
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5,height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
library(ggplot2)
library(ggplot2)
library("rayshader")
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
par(mfrow=c(1,2))
plot_gg(ggdiamonds, width = 5,height = 5, raytrace = FALSE, preview = TRUE)
plot_gg(ggdiamonds, width = 5,height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta=10, phi=30, windowsize = c(800,800))
render_snapshot(clear = TRUE)
mtplot = ggplot(mtcars) +
geom_point(aes(x=mpg,y=disp,color=cyl)) +
scale_color_continuous(limits=c(0,8))
mtplot = ggplot(mtcars) +
geom_point(aes(x=mpg,y=disp,color=cyl)) +
scale_color_continuous(limits=c(0,8))
mtplot = ggplot(mtcars) +
geom_point(aes(x=mpg,y=disp,color=cyl)) +
scale_color_continuous(limits=c(0,8))
par(mfrow=c(1,2))
plot_gg(mtplot, width=3.5, raytrace = FALSE, preview = TRUE)
plot_gg(mtplot, width=3.5, multicore = TRUE, windowsize = c(800,800),
zoom=0.85, phi=35, theta=30, sunangle=225, soliddepth=-100)
render_snapshot(clear = TRUE)
ggplot_potential = generate_ggplot_potential()
ggplot_objects = generate_ggplot_orbiting_objects()
plot_gg(list(ggplot_objects, ggplot_potential), height=5, width=4.5)
d <- data.frame(x = rnorm(500))
library(ggplot2)
ggplot(d, aes(x)) +
geom_histogram()
ggplot(d, aes(x, fill = cut(x, 100))) +
geom_histogram()
ggplot(d, aes(x, fill = cut(x, 100))) +
geom_histogram(show.legend = FALSE)
ggplot(d, aes(x, fill = cut(x, 100))) +
geom_histogram(show.legend = FALSE) +
scale_fill_discrete(h = c(240, 10), c = 120, l = 70) +
theme_minimal() +
labs(x = "Variable X", y = "n") +
ggtitle("Histogram of X")
###############################
############EXPLOR#############
###############################
library(factoextra)
library(FactoMineR)
library(explor)
credit = read.table("Credit.csv",header = T, sep = ';',dec = '.')
credit[,"Age"] <- as.factor(credit[,"Age"])
levels(credit[,"Marche"])[5] <- "Moto"
res.mcaextra <- dudi.acm(df = credit, nf = 5, scannf = FALSE)
var_sup <- credit[,6:11]
res.mcaextra$supv <- supcol(res.mcaextra, dudi.acm(var_sup, scannf = FALSE, nf = 5)$tab)$cosup
explor(res.mcaextra)
install.packages("dataMaid")
install.packages("dataMaid")
install.packages("dataMaid")
install.packages('Matrix')
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
shiny::runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest/machLearn')
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
install.packages('Matrix')
install.packages("Matrix")
install.packages("Matrix")
shiny::runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
install.packages("Matrix")
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest')
install.packages("Matrix")
data1 = read.table("C:\Users\Radhi Toujani\Desktop\1Datasets\final_finalR.csv",
header = T ,
row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na")
)
data1 = read.table("C:\Users\Radhi Toujani\Desktop\1Datasets\final_finalR.csv",
header = T ,
row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T ,
row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T ,
row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
data1.head()
View(data1)
View(data1)
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T ,
row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T ,
row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T ,
#row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
View(data1)
View(data1)
str(data1)
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = F,
row.names = 1,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
str(data1)
View(data1)
View(data1)
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = F,
row.names = 1,
sep = ';',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
str(data1)
View(data1)
View(data1)
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = F,
sep = ',',
na.strings = c(""," ","NA","NaN","Na","na"))
data1
str(data1)
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = F,
sep = ',',
#na.strings = c(""," ","NA","NaN","Na","na")
)
data1 = read.table("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = F,
sep = ','
#na.strings = c(""," ","NA","NaN","Na","na")
)
data1 = read.table(file = "C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = F,
sep = ','
#na.strings = c(""," ","NA","NaN","Na","na")
)
data1 = read.table(file = "C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = F,
sep = ',')
#na.strings = c(""," ","NA","NaN","Na","na")
#)
data1
str(data1)
data1 = read.table(file = "C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T,
sep = ',')
data1 = read.table(file = "C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T,
sep = ',')
readLines(data1)
data1 = read.table(file = "C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T,
sep = ',')
data1 = read.table(file = "C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T,
sep = ',')
data1 = read.csv("C:/Users/Radhi Toujani/Desktop/1Datasets/final_finalR.csv",
header = T,
sep = ',')
data1 = read.csv("C:/Users/Radhi Toujani/Desktop/1Datasets/graphics.csv",
header = T,
sep = ',')
#na.strings = c(""," ","NA","NaN","Na","na")
#)
data1
str(data1)
readLines(data1)
readLines("C:/Users/Radhi Toujani/Desktop/1Datasets/graphics.csv")
readLines("C:/Users/Radhi Toujani/Desktop/1Datasets/graphics.csv",n = 3)
readLines("C:/Users/Radhi Toujani/Desktop/1Datasets/finalRgraphics.csv",n = 3,)
data1 = read.csv("C:/Users/Radhi Toujani/Desktop/1Datasets/finalRgraphics.csv",
header = T,
sep = ',')
#na.strings = c(""," ","NA","NaN","Na","na")
#)
data1
str(data1)
data1 = read.csv("C:/Users/Radhi Toujani/Desktop/1Datasets/finalRgraphics.csv",
header = T,
sep = ',',row.names = 1)
#na.strings = c(""," ","NA","NaN","Na","na")
#)
data1
str(data1)
readLines("C:/Users/Radhi Toujani/Desktop/1Datasets/finalRgraphics.csv",n = 3,)
data1 = read.csv("C:/Users/Radhi Toujani/Desktop/1Datasets/finalRgraphics.csv",
header = T,
sep = ',',row.names = 1)
str(data1)
data1 = read.csv("C:/Users/Radhi Toujani/Desktop/1Datasets/finalRgraphics.csv",
header = T,
sep = ',',row.names = 1)
#na.strings = c(""," ","NA","NaN","Na","na")
#)
data1
shiny::runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/IEDA/inst/IEDA')
myData1 <- read.csv('C:/Users/Radhi Toujani/Desktop/1Datasets/MyDataGraphics.csv',header = T,sep = ',',row.names = 1,na.strings = c(""," ","NA","NAN"))
vis_miss(myData1,warn_large_data = F)
library(DataExplorer)
plot_missing(data = myData1)
install.packages('llama')
library(llama)
trainTestStratSplit = trainTest(myData1,trainpart = 0.7,stratify = TRUE)
library(caret)
View(myData1)
View(myData1)
## select training indices preserving class distribution
in.train <- createDataPartition(myData1$X19, p=0.8, list=FALSE)
summary(factor(myData1$X19))
ytra <- myData1$X19[in.train]; summary(factor(ytra))
ytst <- myData1$X19[-in.train]; summary(factor(ytst))
## standardize features: training parameters of scaling for test-part
Xtra <- scale(myData1[in.train,])
trainData <- select(myData1,-'X19')
Xtra <- trainData[in.train,]
Xtra <- trainData[in.train,]; summary(factor(Xtra))
View(Xtra)
View(Xtra)
Xtra <- trainData[in.train,]; dim(Xtra)
summary(factor(ytra))
dim(ytra)
Xtra <- trainData[in.train,]; dim(Xtra)
summary(factor(ytst))
Xtst <- trainData[-in.train,]; dim(Xtst)
View(Xtst)
View(Xtst)
View(Xtra)
View(myData1)
ytra
View(myData1)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("xgboost"
install.packages("xgboost")
install.packages("xgboost")
require(xgboost)
dtrain <- xgb.DMatrix(data = Xtra, label = ytra)
ytra <- myData1$X19[[in.train]]; summary(factor(ytra))
ytra <- myData1$X19[in.train]; summary(factor(ytra))
ytst <- myData1$X19[-in.train]; summary(factor(ytst))
yData <- select(myData1,'X19')
ytra <- yData[in.train]; summary(factor(ytra))
ytst <- yData[-in.train]; summary(factor(ytst))
XData <- select(myData1,-'X19')
Xtra <- XData[in.train,]; dim(Xtra)
Xtst <- XData[-in.train,]; dim(Xtst)
dtrain <- xgb.DMatrix(data = train$data, label = train$label)
View(yData)
dtrain <- xgb.DMatrix(data = Xtra, label = ytra)
ytra <- data.frame(yData[in.train]); summary(factor(ytra))
ytra <- data.frame(myData1$X19[in.train]); summary(factor(ytra))
View(ytra)
ytra <- data.frame(myData1$X19[in.train]); dim(ytra)
ytra <- data.frame(myData1$X19[in.train]); dim(ytra)
ytst <- data.frame(myData1$X19[-in.train]); dim(ytst)
XData <- select(myData1,-'X19')
Xtra <- XData[in.train,]; dim(Xtra)
Xtst <- XData[-in.train,]; dim(Xtst)
dtrain <- xgb.DMatrix(data = Xtra, label = ytra)
shiny::runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RadhiEDA/inst/IEDA')
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RadhiEDA/inst/IEDA')
getwd
getwd()
setwd("C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RadhiEDA/inst/IEDA")
runApp()
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest/machLearn')
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RadhiEDA/inst/IEDA')
dirname(rstudioapi::getActiveDocumentContext()$path)
cat(dirname(rstudioapi::getActiveDocumentContext()$path),'radhi.csv',sep = '')
cat(dirname(rstudioapi::getActiveDocumentContext()$path),'/','radhi.csv',sep = '')
paste(dirname(rstudioapi::getActiveDocumentContext()$path),'/','radhi.csv',sep = '')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest/machLearn')
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RadhiEDA/inst/IEDA')
library(eply)
install.packages('eply')
library(eply)
library(eply)
unquote('X9')
print('X9')
quos(noquote('Radhi'))
noquote('Radhi')
runApp()
noquote('selcol')
runApp()
runApp()
runApp()
runApp()
detach("package:MASS", unload = TRUE)
runApp()
library(MASS, lib.loc = "C:/Program Files/R/R-3.5.1/library")
runApp()
runApp()
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RshinyTest/RadhiShinyTest/machLearn')
runApp('C:/Users/Radhi Toujani/Desktop/ESPRIT_4DS2/StageGRAPHICS/RadhiEDA/inst/IEDA')
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_error()
